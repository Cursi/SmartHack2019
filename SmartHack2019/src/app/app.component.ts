import { Component, Directive, ElementRef, HostListener, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { EditTextDialogComponent } from './edit-text-dialog/edit-text-dialog.component';
import { AngularFireDatabase } from '@angular/fire/database';
import { Observable } from 'rxjs';
import { AddVersionDialogComponent } from './add-version-dialog/add-version-dialog.component';
import { FirebaseService } from './firebase.service';
import { EditClassDialogComponent } from './edit-class-dialog/edit-class-dialog.component';
import { EditStylesDialogComponent } from './edit-styles-dialog/edit-styles-dialog.component';
import { EditImageDialogComponent } from './edit-image-dialog/edit-image-dialog.component';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
})

@Directive({ selector: '[trackScroll]' })
export class AppComponent {
    userName = "Muhaha Guy"
    selectedElement = null;
    flagConsole = false;

    @ViewChild("customIframe", { static: false }) customIframe;

    theData: any = {};
    atribut = "";
    currentVersionIndex: number;
    // versions: Observable<any[]>;

    constructor(public dialog: MatDialog, public db: AngularFireDatabase, private firebaseService: FirebaseService) {
        // this.firebaseService.versions.subscribe

        // this.versions = db.list('versions').valueChanges();
        // this.versions.subscribe((res) => 
        // {
        //   console.log(res);
        // });
    }

    // Muhaha()
    // {
    //   const itemsRef = this.db.list('versions')
    //   itemsRef.push(
    //   {
    //     isCurrent: false,
    //     name: "Versiune sucara",
    //     changes:
    //     [
    //       {
    //         classes: "class1 class2 classn",
    //         inner: "innerText goes here",
    //         src: "",
    //         styles: 
    //         {
    //           style1: "stuff1",
    //           style2: "stuff2",
    //         },
    //         autoGeneratedID: "idhaccx"
    //       },
    //     ]
    //   });
    // }

    Publish() {
        console.log(this.atribut);
        // let publishedVersionKey = null;
        let usersRef = this.db.database.ref('versions');
        var self = this;
        this.firebaseService.PublishVersion(this.atribut);

        usersRef.orderByChild('isCurrent').equalTo(true).on("value", function (snapshot) {
            // console.log(snapshot.val());
            snapshot.forEach(data => {
                console.log(data.key, self.atribut, "testcuc")
                if (data.key !== String(self.atribut)) {
                    self.firebaseService.UnpublishVersion(data.key);
                }
            });
        });
    }

    VersionSelected(i) {
        document.getElementById("fancyContextMenu").style.display = "none";
        this.currentVersionIndex = i;
        this.testVar = false;
        setTimeout(() => {
            this.testVar = true;
        }, 50);
    }

    testVar = true;

    PostEditorSignal() {
        if (this.currentVersionIndex != null && this.currentVersionIndex != undefined) {
            console.log(this.currentVersionIndex);
            this.customIframe.nativeElement.contentWindow.postMessage(
                {
                    type: "editorMode",
                    versionKey: this.currentVersionIndex
                }, "*");
        }
        // this.customIframe.nativeElement.contentWindow.location.reload(true);

    }

    ngAfterViewInit() {
        // Create IE + others compatible event handler
        var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
        var eventer = window[eventMethod];
        var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

        // Listen to message from child window
        eventer(messageEvent, (e) => {
            if (this.currentVersionIndex != null && this.currentVersionIndex != undefined) {
                var contextMenu = document.getElementById("fancyContextMenu");
                var customIframe = document.getElementById("customIframe");

                let contextMenuLeft = String(e.data.clientClickX - contextMenu.offsetWidth / 2) + "px";
                let contextMenuTop = String(e.data.clientClickY + customIframe.offsetTop - contextMenu.offsetHeight / 2) + "px";

                if (contextMenuLeft != "NaNpx") {
                    contextMenu.style.left = contextMenuLeft;
                    contextMenu.style.top = contextMenuTop;
                    contextMenu.style.display = "block";
                }

                this.theData = e.data;
                console.log(this.theData, "postMessage");
            }
        }, false);
    }

    GetOffset(el) {
        var _x = 0;
        var _y = 0;
        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    }

    OpenEditTextDialog(): void {
        var self = this;

        const dialogRef = this.dialog.open(EditTextDialogComponent,
            {
                width: "80%",
                data: { inner: self.theData.inner }
            });

        dialogRef.afterClosed().subscribe(result => {
            try {
                this.firebaseService.EditChange(this.currentVersionIndex, result, this.theData, 'inner');
            }
            catch { }

            document.getElementById("fancyContextMenu").style.display = "none";
            console.log(result);
        });
    }

    OpenEditClassDialog(): void {
        var self = this;

        const dialogRef = this.dialog.open(EditClassDialogComponent,
            {
                width: "80%",
                data: { classes: self.theData.classes }
            });

        dialogRef.afterClosed().subscribe(result => {
            try {
                this.firebaseService.EditChange(this.currentVersionIndex, result, this.theData, 'classes');
            }
            catch { }

            document.getElementById("fancyContextMenu").style.display = "none";
            console.log(result);
        });
    }

    OpenEditStylesDialog(): void {
        var self = this;

        const dialogRef = this.dialog.open(EditStylesDialogComponent,
            {
                width: "80%",
                data: { styles: self.theData.styles }
            });

        dialogRef.afterClosed().subscribe(result => {
            try {
                this.firebaseService.EditChange(this.currentVersionIndex, result, this.theData, 'styles');
            }
            catch { }

            document.getElementById("fancyContextMenu").style.display = "none";
            console.log(result);
        });
    }

    OpenEditImageDialog(): void {
        var self = this;

        const dialogRef = this.dialog.open(EditImageDialogComponent,
            {
                width: "80%",
                data: { src: self.theData.src }
            });

        dialogRef.afterClosed().subscribe(result => {
            try {
                this.firebaseService.EditChange(this.currentVersionIndex, result, this.theData, 'src');
            }
            catch { }

            document.getElementById("fancyContextMenu").style.display = "none";
            console.log(result);
        });
    }

    OpenAddVersionDialog(): void {
        const dialogRef = this.dialog.open(AddVersionDialogComponent, {});

        dialogRef.afterClosed().subscribe(result => {
            console.log(result);
        });
    }

    RemoveKebab(): void {
        try {
            this.firebaseService.EditChange(this.currentVersionIndex, null, this.theData, 'remove kebab');
        }
        catch { }

        document.getElementById("fancyContextMenu").style.display = "none";
    }
}
